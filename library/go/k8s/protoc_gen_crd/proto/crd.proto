syntax = "proto3";

package protoc_gen_crd;

import "google/protobuf/descriptor.proto";

option go_package = "github.com/yandex/protoc-gen-crd/library/go/k8s/protoc_gen_crd/proto;crd";
option java_multiple_files = true;
option java_outer_classname = "CRD";
option java_package = "library.go.k8s.protoc_gen_crd.proto";

enum ColumnType {
    // Unspecified column type
    CT_NONE = 0;
    // Non-floating-point numbers
    CT_INTEGER = 1;
    // Floating point numbers
    CT_NUMBER = 2;
    // Strings
    CT_STRING = 3;
    // true or false
    CT_BOOLEAN = 4;
    // Rendered differentially as time since this timestamp
    CT_DATE = 5;
}

enum ColumnFormat {
    // Unspecified column format, the default one for the ColumnType will be used.
    CF_NONE = 0;
    CF_INT32 = 1;
    CF_INT64 = 2;
    CF_FLOAT = 3;
    CF_DOUBLE = 4;
    CF_BYTE = 5;
    CF_DATE = 6;
    CF_DATETIME = 7;
    CF_PASSWORD = 8;
}

enum ScopeType {
    // Object must always be attached to some namespace, and subjects to namespace-scoped RBAC roles
    ST_NAMESPACED = 0;
    // Object would exist in global scope, and only ClusterRole RBAC would be applied to id
    ST_CLUSTER = 1;
}


enum SchemaSide {
    // Generate field in both CRD modes: client and server
    SS_COMMON = 0;
    // Generate field only for client CRD to apply kustomize and validate objects
    SS_CLIENT = 1;
}

message PrinterColumn {
    // Human readable name of the column
    string name = 1;
    // Column type, affects how column content is interpreted before printing.
    ColumnType type = 2;
    // Column format hint.
    // See https://github.com/OAI/OpenAPI-Specification/blob/7cc8f4c4e742a20687fa65ace54ed32fcb8c6df0/versions/2.0.md#data-types
    // for full list of types and their supported formats
    ColumnFormat format = 3;
    // Human readable description of the column
    string description = 4;
    // Very simple JSON Path expression (only path without any logic) that would be evaluated for object to retrieve column value
    string json_path = 5;
    // Column priority. The less value, the higher priority.
    // Columns with priority > 0 can be omitted from output if no sufficient space on the screen for printing
    int32 priority = 6;
}

message K8sCRD {
    // CRD API group name. Used to group your CRDs, must conform to DNS domain-like format, like "apis.example.com"
    string api_group = 1;
    // Resource kind. Used to identify resource type in serialized specs. "CamelCasedSingular" should be used.
    string kind = 2;
    // Singular name for the object type, used as an alias for kind in CLI, and for display.
    // Normally it is lowercased kind, e.g. "camelcasedsingular"
    string singular = 3;
    // Plural name for the object type, used in API URLs.
    // Normally it is singular name with plural suffix added, e.g. "camelcasedsingulars"
    string plural = 4;
    // Short aliases that can be used in CLI to refer to resource, if you want.
    // E.g. ["camelcased", "ccs"]
    repeated string short_names = 5;
    // Categories the custom resource belongs to.
    // Used in CLI to list resources from some category regardless of their kind.
    // E.g. ["all", "mycompany", "myservice"]
    repeated string categories = 6;
    // Additional columns available in kubectl get
    repeated PrinterColumn additional_columns = 7;
    // Object kind scope
    ScopeType scope = 8;
    // List of fully qualified protobuf message types (including proto package name)
    // or field names (e.g. "spec.field"), that should have custom kustomize patch strategy applied.
    // This option overrides K8sPatch option set on the field, and field targeted rules has precedence over type targeted ones.
    repeated K8sPatchSelector field_patch_strategies = 9;
}

message K8sPatch {
    // Field that is used as a key of the struct when "merge" strategy is used for the list. Items with the matching key would be merged into one.
    string merge_key = 1;
    // Merge strategy.
    // Normally there are only two options: "merge" and "replace", with the former being default for structs and the latter default for lists.
    string merge_strategy = 2;
}

message K8sPatchSelector {
    oneof target {
        // Fully qualified name (with package) of protobuf type of the message to patch, e.g. "example.com.MyMessage"
        string protobuf_type = 1;
        // Field path of the field to patch, e.g. "spec.field"
        string field_path = 2;
    }

    // Patch strategy to apply to the field.
    K8sPatch k8s_patch = 3;
}

extend google.protobuf.MessageOptions {
    // This option is added to a message in proto file, to create CRD from this file.
    // Message type must contain "spec" and "status" fields to conform to k8s CRD rules.
    K8sCRD k8s_crd = 73394821;
}

extend google.protobuf.FieldOptions {
    // Add this option to a field to specify how it should be treated during strategic merge.
    // See https://github.com/kubernetes/community/blob/6690abcd6b833f46550f5eaba2ec17a9e39b35c4/contributors/devel/sig-api-machinery/strategic-merge-patch.md
    // about various patch strategies.
    // NOTE: no support for server-side apply yet.
    K8sPatch k8s_patch = 73394822;
    //  Add this option to a field to specify in which CRD mode field should be present. By default all fields are generated both for server and client schemas
    SchemaSide schema  = 73394823;
}
